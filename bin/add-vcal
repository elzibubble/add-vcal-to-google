#!/usr/bin/python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import argparse
import codecs
import httplib2
import icalendar
import os.path
import sys

from apiclient.discovery import build
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
from oauth2client import tools


def read_ical_event(f):
    content = f.read()
    # Thanks, https://github.com/dmedvinsky/mutt-ics
    ics_text = content.replace("\nDTSTART:1601", "\nDTSTART:1901")

    cal = icalendar.Calendar.from_ical(ics_text)
    return [x for x in cal.subcomponents if x.name == 'VEVENT'][0]


def tuple_person(p):
    return (p.params['CN'], p.replace('MAILTO:', ''))


def normalize_iev(ev):
    ev['ORGANIZER'] = tuple_person(ev['ORGANIZER'])
    attendees = ev['ATTENDEE']
    if not isinstance(attendees, list):
        attendees = [attendees]
    ev['ATTENDEE'] = [tuple_person(a) for a in attendees]
    return ev


def get_creds(flags):
    flow = OAuth2WebServerFlow(
        "23276227116-vq4tg8dd781j9ij9lm6p2asnr2urvc8h"
        ".apps.googleusercontent.com",
        "jCEWeCP8nvGmXnr8LjGlk1MH",
        'https://www.googleapis.com/auth/calendar',
        redirect_uri='http://localhost:8080/')
    storage = Storage(os.path.expanduser('~/.add-vcal.dat'))

    creds = storage.get()
    if creds is None or creds.invalid:
        creds = tools.run_flow(flow, storage, flags)
    return creds


def get_calendar(creds):
    http = httplib2.Http()
    http = creds.authorize(http)
    return build('calendar', 'v3', http=http)


def isofmt(d):
    return d.isoformat("T") + "Z"  # FIXME


def add_event(service, event):
    return service.events().insert(calendarId='primary', body=event).execute()


def format_request(ev):
    datefmt = '%a, %d %b %Y, %H:%M'
    attendees = "\n".join(("    %s <%s>" % a)
                          for a in ev['ATTENDEE'])
    args = {'summary': ev['SUMMARY'],
            'organizer': "%s <%s>" % ev['ORGANIZER'],
            'start': ev['DTSTART'].dt.strftime(datefmt),
            'end': ev['DTEND'].dt.strftime(datefmt),
            'location': ev['LOCATION'],
            'attendees': attendees,
            'description': ev['DESCRIPTION'].strip(), }
    return u"""
Summary:   %(summary)s
Organizer: %(organizer)s
Starts at: %(start)s
Ends at:   %(end)s
Location:  %(location)s
Attendees:
%(attendees)s

%(description)s
"""[1:] % args


def main(args):
    iev = read_ical_event(codecs.getreader("utf-8")(sys.stdin))
    iev = normalize_iev(iev)

    # parser = argparse.ArgumentParser(parents=[tools.argparser])
    # flags = parser.parse_args()
    # creds = get_creds(flags)
    # service = get_calendar(creds)

    request = {
        'summary': iev['SUMMARY'],
        'location': iev['LOCATION'],
        'start': {'dateTime': isofmt(iev['DTSTART'].dt)},
        'end': {'dateTime': isofmt(iev['DTEND'].dt)},
        'attendees': [{'displayName': a[0], 'email': a[1]}
                      for a in iev['ATTENDEE']],
    }
    # add_event(service, request)
    desc = format_request(iev)
    codecs.getwriter("utf-8")(sys.stdout).write(desc)


if __name__ == '__main__':
    main(sys.argv)
