#!/usr/bin/python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import argparse
import codecs
import httplib2
import icalendar
import os.path
import sys

from apiclient.discovery import build
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
from oauth2client import tools


# ######### ICAL ##########

def read_ical_event(f):
    content = f.read()
    # Thanks, https://github.com/dmedvinsky/mutt-ics
    ics_text = content.replace("\nDTSTART:1601", "\nDTSTART:1901")

    cal = icalendar.Calendar.from_ical(ics_text)
    return [x for x in cal.subcomponents if x.name == 'VEVENT'][0]


def ical2person(p):
    return (p.params['CN'], p.replace('MAILTO:', ''))


def normalize_ical(ev):
    ev['ORGANIZER'] = ical2person(ev['ORGANIZER'])
    attendees = ev['ATTENDEE']
    if not isinstance(attendees, list):
        attendees = [attendees]
    ev['ATTENDEE'] = [ical2person(a) for a in attendees]
    return ev


def format_request(ev):
    datefmt = '%a, %d %b %Y, %H:%M'
    attendees = "\n".join(("    %s <%s>" % a)
                          for a in ev['ATTENDEE'])
    args = {'summary': ev['SUMMARY'],
            'organizer': "%s <%s>" % ev['ORGANIZER'],
            'start': ev['DTSTART'].dt.strftime(datefmt),
            'end': ev['DTEND'].dt.strftime(datefmt),
            'location': ev['LOCATION'],
            'attendees': attendees,
            'description': ev['DESCRIPTION'].strip(), }
    return u"""
Summary:   %(summary)s
Organizer: %(organizer)s
Starts at: %(start)s
Ends at:   %(end)s
Location:  %(location)s
Attendees:
%(attendees)s

%(description)s
"""[1:] % args


# ######### GOOGLE BASE ##########

def get_creds(flags):
    flow = OAuth2WebServerFlow(
        "23276227116-vq4tg8dd781j9ij9lm6p2asnr2urvc8h"
        ".apps.googleusercontent.com",
        "jCEWeCP8nvGmXnr8LjGlk1MH",
        'https://www.googleapis.com/auth/calendar',
        redirect_uri='http://localhost:8080/')
    storage = Storage(os.path.expanduser('~/.add-vcal.dat'))

    creds = storage.get()
    if creds is None or creds.invalid:
        creds = tools.run_flow(flow, storage, flags)
    return creds


def get_calendar(creds):
    http = httplib2.Http()
    http = creds.authorize(http)
    return build('calendar', 'v3', http=http)


def isofmt(d):
    return d.isoformat("T") + "Z"  # FIXME


def person2google(p):
    return {'displayName': p[0], 'email': p[1]}


def import_event(service, ev):
    """Import a VCAL event to Google.

    Timezones are NOT supported! Outlook appears to use non-Olson timezones
    like "Pacific Standard Time". Times are assumed to be UTC.

    Organizer is not set as Google requires the calendar owner to be either
    the organizer or an attendee. As imported events are likely to use
    non-Google email addresses, it's easiest to not set organizer and allow
    Google to assume the Google user is the organizer.

    Recurrence rules are NOT supported! Yet.
    """

    body = {
        'iCalUID': ev['UID'],
        'sequence': ev['SEQUENCE'],
        'status': ev['STATUS'].lower(),
        'summary': ev['SUMMARY'],
        'location': ev['LOCATION'],
        'start': {'dateTime': isofmt(ev['DTSTART'].dt)},
        'end': {'dateTime': isofmt(ev['DTEND'].dt)},
        # 'recurrence': [],
        # 'organizer': person2google(ev['ORGANIZER']),
        'attendees': [person2google(a) for a in ev['ATTENDEE']],
        'transparency': ev['TRANSP'].lower(),
        'visibility': ev['CLASS'].lower(),
    }
    return service.events().import_(calendarId='primary', body=body).execute()


# ######### MAIN ##########

def main(args):
    ev = read_ical_event(codecs.getreader("utf-8")(sys.stdin))
    ev = normalize_ical(ev)

    code = 0
    # raise SystemExit(code)
    try:
        parser = argparse.ArgumentParser(parents=[tools.argparser])
        flags = parser.parse_args()
        creds = get_creds(flags)
        service = get_calendar(creds)
        import_event(service, ev)
    except Exception as e:
        print("************ EXCEPTION **********")
        print(e)
        print("************ EXCEPTION **********")
        code = 1

    desc = format_request(ev)
    codecs.getwriter("utf-8")(sys.stdout).write(desc)
    raise SystemExit(code)


if __name__ == '__main__':
    main(sys.argv)
