#!/usr/bin/python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import argparse
import arrow
import codecs
import httplib2
import icalendar
import os.path
import pytz
import sys
import json

from apiclient.discovery import build
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
from oauth2client import tools


LOCAL_TZ_IANA = 'Europe/London'


# ######### ICAL ##########

def read_ical(f):
    content = f.read()
    if content.strip() == "":
        raise SystemExit(0)
    # Thanks, https://github.com/dmedvinsky/mutt-ics
    content = content.replace("\nDTSTART:1601", "\nDTSTART:1901")
    return icalendar.Calendar.from_ical(content)


def ical2person(p):
    if not p:
        return None
    return (p.params['CN'], p.replace('MAILTO:', ''))


def normalize_ev(ev):
    ev['ORGANIZER'] = ical2person(ev.get('ORGANIZER'))
    attendees = ev.get('ATTENDEE')
    if not isinstance(attendees, list):
        attendees = [attendees]
    ev['ATTENDEE'] = []  # [ical2person(a) for a in attendees if a]
    tzlocal = arrow.now().tzinfo
    ev['DTSTART'] = arrow.get(ev['DTSTART'].dt).to(tzlocal).isoformat()
    ev['DTEND'] = arrow.get(ev['DTEND'].dt).to(tzlocal).isoformat()
    return ev


def format_event(ev):
    msg = []
    msg.append("Summary:   %s" % ev.get('SUMMARY', ''))
    if ev.get('ORGANIZER'):
        msg.append("Organizer: %s <%s>" % ev.get('ORGANIZER'))
    msg.append("Starts at: %s" % ev['DTSTART'])
    msg.append("Ends at:   %s" % ev['DTEND'])
    if ev.get('LOCATION'):
        msg.append("Location:  %s" % ev['LOCATION'])
    if len(ev['ATTENDEE']) > 0:
        msg.append("Attendees:")
        for a in ev['ATTENDEE']:
            msg.append("    %s <%s>" % a)
    if ev.get('DESCRIPTION'):
        msg.append("")
        msg.append("%s" % ev['DESCRIPTION'].strip())
    return "\n".join(msg)


# ######### GOOGLE BASE ##########

def get_creds(flags):
    flow = OAuth2WebServerFlow(
        "23276227116-vq4tg8dd781j9ij9lm6p2asnr2urvc8h"
        ".apps.googleusercontent.com",
        "jCEWeCP8nvGmXnr8LjGlk1MH",
        'https://www.googleapis.com/auth/calendar',
        redirect_uri='http://localhost:8080/')
    storage = Storage(os.path.expanduser('~/.add-vcal.dat'))

    creds = storage.get()
    if creds is None or creds.invalid:
        creds = tools.run_flow(flow, storage, flags)
    return creds


def get_calendar(creds):
    http = httplib2.Http()
    http = creds.authorize(http)
    return build('calendar', 'v3', http=http)


def person2google(p):
    return {'displayName': p[0], 'email': p[1]}


def mk_request(ev):
    """Import a VCAL event to Google.

    Organizer is not set as Google requires the calendar owner to be either
    the organizer or an attendee. As imported events are likely to use
    non-Google email addresses, it's easiest to not set organizer and allow
    Google to assume the Google user is the organizer.

    Attendees are unset because then if you try to change the event in Google
    Calendar, it asks if you want to notify attendees, which I never do.
    """

    body = {}
    if ev.get('UID'):
        body['iCalUID'] = ev['UID']
    elif ev.get('DTSTAMP'):
        body['iCalUID'] = ev['DTSTAMP'].dt.isoformat()
    else:
        body['iCalUID'] = ev['SUMMARY']
    body['summary'] = ev['SUMMARY']
    if ev.get('DESCRIPTION'):
        body['description'] = ev['DESCRIPTION']
    body['start'] = {'dateTime': ev['DTSTART'], 'timeZone': LOCAL_TZ_IANA}
    body['end'] = {'dateTime': ev['DTEND'], 'timeZone': LOCAL_TZ_IANA}
    if ev.get('SEQUENCE'):
        body['sequence'] = ev['SEQUENCE']
    if ev.get('STATUS'):
        body['status'] = ev['STATUS'].lower()
    if ev.get('LOCATION'):
        body['location'] = ev['LOCATION']
#      body['attendees'] = [person2google(a) for a in ev['ATTENDEE']]
#      body['organizer'] = person2google(ev['ORGANIZER'])
    if ev.get('TRANSP'):
        body['transparency'] = ev['TRANSP'].lower()
    if ev.get('CLASS'):
        body['visibility'] = ev['CLASS'].lower()
    body['recurrence'] = []
    for label in ['RRULE', 'EXRULE', 'RDATE', 'EXDATE']:
        detail = ev.get(label)
        if not detail:
            continue
        body['recurrence'].append("%s:%s" % (label, detail.to_ical()))
    return body


# ######### MAIN ##########

def main(args):
    # Get creds up front so I can run this without input to refresh creds
    parser = argparse.ArgumentParser(parents=[tools.argparser])
    parser.add_argument('--dump', action='store_true',
                        help='Just dump the event, don\'t add to Google')
    args = parser.parse_args()
    creds = None
    if not args.dump:
        creds = get_creds(args)

    cal = read_ical(codecs.getreader("utf-8")(sys.stdin))
    ev = normalize_ev(cal.walk('VEVENT')[0])

    try:
        req = mk_request(ev)
        if args.dump:
            codecs.getwriter("utf-8")(sys.stdout).write(json.dumps(req))
        else:
            service = get_calendar(creds)
            service.events().import_(calendarId='primary', body=req).execute()
    except Exception as e:
        print("************ EXCEPTION **********")
        print(e)
        print("************ EXCEPTION **********")
        raise
    finally:
        desc = format_event(ev)
        codecs.getwriter("utf-8")(sys.stdout).write(desc)


if __name__ == '__main__':
    main(sys.argv)
